{"version":3,"sources":["pages/home/ViewGraph.tsx","modules/tracie-admin/index.ts","modules/tracie-admin/src/TracieAdmin.ts","pages/utils/tc.ts","pages/utils/savedPreset.ts","pages/home/ViewPresetMenu.tsx","pages/utils/transform.ts","demo/timeWindow.ts","demo/generator.ts","pages/home/HomePage.tsx","pages/home/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","pages/home/styles.module.scss"],"names":["ViewGraph","canvas","chart","setData","destroy","undefined","props","data","Chart","getConfig","this","width","Math","min","window","innerWidth","height","innerHeight","Paper","style","classes","graph","ref","component","className","cls","emptyBox","Inbox","fontSize","Typography","variant","React","Component","theme","createMuiTheme","padding","spacing","paddingTop","marginTop","colors","options","type","labels","length","map","item","Date","x","getLabels","datasets","opt","i","label","name","borderColor","backgroundColor","y","pointRadius","fill","lineTension","animation","duration","responsive","scales","xAxes","distribution","display","scaleLabel","ticks","maxRotation","maxTicksLimit","yAxes","tooltips","intersect","mode","Tracie","_endpoint","server","query","request","transformResult","rs","$name","join","method","path","Promise","resolve","reject","url","init","Object","assign","body","JSON","stringify","headers","input","keys","k","filter","split","pop","indexOf","toURLQuery","fetch","then","json","catch","host","location","enpoint","TC_ENDPOINT","TracieAdmin","key","saveList","list","localStorage","setItem","out","getItem","parse","SavedPreset","save","state","all","keyword","period","intervalValue","interval","valueIncreasing","push","id","remove","splice","ViewSavedPresetMenu","useState","anchorEl","setAnchorEl","handleClose","presets","IconButton","aria-controls","aria-haspopup","onClick","event","currentTarget","MoreVert","Popover","open","Boolean","onClose","elevation","anchorOrigin","vertical","horizontal","transformOrigin","List","preset","ViewMenuItem","handleSelect","ListItem","ListItemText","primary","Divider","button","handleSave","ListItemIcon","BookmarkOutlined","handleClear","DeleteOutline","desc","secondary","ListItemSecondaryAction","Delete","transformData","result","transformDataValueIncreasing","cloned","cloneDeep","total","forEach","set","increase","opts","date","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setMonth","getMonth","MONTHS","COLORS","Samples","utils","srand","seed","_seed","rand","max","numbers","config","value","cfg","from","count","decimals","continuity","dfactor","pow","round","step","prefix","values","months","section","ceil","substring","color","index","transparentize","opacity","alpha","Color","rgbString","now","generateRandomData","time","start","end","setSeconds","startTime","last","endMs","getTime","getTimeWindow","v","toJSON","randomData","keywords","$interval","$start","$end","$intervalValue","HomePage","handleSubmit","ev","preventDefault","fetchData","clearData","setState","a","parseInt","process","REACT_APP_USE_SAMPLE_DATA","setGraphData","console","log","errMessage","toString","enqueueSnackbar","handleChange","target","checked","handleValueChange","savePreset","rest","setPreset","bar","barGroup","FormControl","InputLabel","Select","labelId","onChange","MenuItem","orientation","TextField","onBlur","InputLabelProps","shrink","defaultValue","FormControlLabel","control","Switch","inputProps","flexRow","onSubmit","form","placeholder","chips","iconButton","aria-label","ArrowForward","withSnackbar","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","title","App","AppBar","position","Container","Toolbar","maxWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.164cc8e0.chunk.js","sourcesContent":["import React, { CSSProperties } from \"react\";\n\nimport Chart from \"chart.js\";\nimport cls from \"./styles.module.scss\";\n\nimport { Inbox } from \"@material-ui/icons\";\nimport { TracieQueryRepresentData } from \"../utils/transform\";\nimport { createMuiTheme, Paper, Typography } from \"@material-ui/core\";\n\nexport type Dataset = { x: any, y: number }[];\nexport type DatasetCollection = { [name: string]: Dataset };\n\ntype Props = {\n    data?: TracieQueryRepresentData[],\n    hint?: any\n}\n\nexport default class ViewGraph extends React.Component<Props> {\n\n    canvas?: HTMLCanvasElement | null;\n    chart?: Chart;\n\n    componentDidMount() {\n        this.setData();\n    }\n\n    componentDidUpdate() {\n        this.setData();\n    }\n\n    private setData = () => {\n\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = undefined;\n        }\n\n        if (this.canvas && this.props.data) {\n            this.chart = new Chart(this.canvas, getConfig(this.props.data))\n        }\n    }\n\n    render() {\n        const { data } = this.props;\n        const width = Math.min(1200, window.innerWidth - 140);\n        const height = Math.min(400, window.innerHeight - 260);\n\n        if (!data) {\n            return <Paper component=\"div\" className={cls.emptyBox}>\n                <Inbox style={{ fontSize: 82 }} />\n                <Typography variant=\"h6\" >\n                    No events selected\n                </Typography>\n                <Typography variant=\"body2\" >\n                    Enter an event name to display graph\n            </Typography>\n            </Paper>\n        }\n\n        return <Paper style={classes.graph}>\n            <div>\n                <canvas height={height} width={width} ref={ref => this.canvas = ref} />\n            </div>\n        </Paper>\n    }\n}\n\nconst theme = createMuiTheme();\n\nconst classes: { [name: string]: CSSProperties } = {\n    graph: {\n        padding: theme.spacing(1),\n        paddingTop: theme.spacing(4),\n        marginTop: theme.spacing(2)\n    }\n}\n\nconst colors = [\n    `#ec407a`,\n    `#36a2eb`,\n    `#66bb6a`,\n    `#4bc0c0`,\n    `#303f9f`,\n    `#ef5350`,\n    `#ab47bc`,\n    `#7e57c2`,\n    `#42a5f5`,\n    `#ffa726`,\n    `#333538`,\n];\n\nfunction getDatasets(options: TracieQueryRepresentData[]) {\n    return options.map((opt, i) => {\n        return {\n            label: opt.name,\n            borderColor: colors[i],\n            backgroundColor: colors[i],\n            data: opt.data.map(i => i.y),\n            pointRadius: 0,\n            fill: false,\n            lineTension: 0.1,\n        }\n    });\n}\n\nfunction getConfig(data: TracieQueryRepresentData[]) {\n\n    let labels = getLabels(data);\n\n    var config: Chart.ChartConfiguration = {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: getDatasets(data)\n        },\n        options: {\n            animation: {\n                duration: 0\n            },\n            responsive: true,\n            scales: {\n                xAxes: [{\n                    type: \"time\",\n                    distribution: 'series',\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                    },\n                    ticks: {\n                        maxRotation: 0,\n                        maxTicksLimit: 8\n                    },\n                }],\n                yAxes: [{\n                    display: true,\n                    ticks: {\n                        maxTicksLimit: 8,\n                    },\n                    scaleLabel: {\n                        display: true,\n                    }\n                }]\n            },\n            tooltips: {\n                intersect: false,\n                mode: 'index',\n            }\n        }\n    };\n\n    return config;\n}\n\nfunction getLabels(data: TracieQueryRepresentData[]): Date[] {\n\n    // Only take labels from the first set\n    // since all sets of TracieQueryRepresentData have the same `x` values\n    return !data.length ? [] : data[0].data.map(item => new Date(item.x));\n}","import { default as Tracie } from \"./src/TracieAdmin\";\n\nexport default Tracie","type TracieProps = {\n    server: string\n}\n\nexport default class TracieClient {\n\n    _endpoint: string;\n\n    constructor(props: TracieProps) {\n        this._endpoint = props.server;\n    }\n\n    query(name: string[], query?: TracieQueryParams) {\n        return this.request<TracieQueryResults>(\"GET\", ``, {\n            transformResult: rs => rs.data,\n            query: { ...query, $name: name.join(\",\") }\n        })\n    }\n\n    private request<T = any>(method: \"POST\" | \"GET\" | \"PATCH\" | \"DELETE\", path: string, options?: {\n        data?: { [name: string]: any },\n        query?: { [name: string]: any },\n        transformResult?: (input: any) => any\n    }): Promise<T> {\n\n        return new Promise((resolve, reject) => {\n\n            let url = `${this._endpoint}/${path}`;\n            let init: RequestInit = { method };\n\n            const { data, query, transformResult } = Object.assign({}, options);\n\n            if (data) {\n                init = Object.assign(init, {\n                    body: JSON.stringify(data),\n                    headers: {\n                        [`Content-Type`]: `application/json`\n                    }\n                })\n            }\n\n            if (query) {\n                url = toURLQuery(url, query);\n            }\n\n            fetch(url, init)\n                .then(rs => rs.json())\n                .then(rs => resolve(transformResult ? transformResult(rs) : rs))\n                .catch(reject)\n        })\n    }\n}\n\nfunction toURLQuery(url: string, input: { [name: string]: any }) {\n    let query = Object.keys(input)\n        .map(k => input[k] ? `${k}=${input[k]}` : null)\n        .filter(k => k)\n        .join(`&`);\n\n    if ((url.split(`/`).pop() || \"\").indexOf(`?`) !== -1) {\n        return `${url}&${query}`;\n    }\n\n    return `${url}?${query}`\n}\n\n\ntype TracieQueryResultData = {\n    name: string,\n    result: { [date: string]: number }\n}\nexport type TracieQueryResults = TracieQueryResultData[];\n\nexport type TracieQueryParams = {\n    $interval?: TracieQueryInterval,\n    $intervalValue?: number,\n    $start?: Date | string,\n    $end?: Date | string\n}\n\nexport type TracieQueryInterval = \"month\" | \"day\" | \"minute\";","import Tracie from \"../../modules/tracie-admin\";\n\nconst host = window.location.host || `localhost:8080`;\n\n// @ts-ignore\nconst enpoint = window.TC_ENDPOINT || \"/tc\";\n\nconst TracieAdmin = new Tracie({\n    server: `//${host}${enpoint}`\n});\n\nexport default TracieAdmin;","const key = `tracie_presets`;\n\nexport type SavedPresetProps = {\n    name: string,\n    state: any,\n    id: number\n}\nfunction remove(id: number) {\n    let all = list();\n    all.splice(id, 1);\n    saveList(all);\n}\n\nfunction save(state: any, name?: string) {\n    let all = list();\n\n    if (!name) {\n        name = `${state.keyword} — ${state.period}, ${state.intervalValue || \"every\"} ${state.interval} ${state.valueIncreasing ? \", value increase\" : \"\"}`;\n    }\n    \n    all.push({ id: all.length, name, state });\n    saveList(all);\n}\n\nfunction saveList(list: SavedPresetProps[]) {\n    localStorage.setItem(key, JSON.stringify(list));\n}\n\nfunction list(): SavedPresetProps[] {\n    let out = localStorage.getItem(key) || `[]`;\n    return JSON.parse(out);\n}\n\nconst SavedPreset = {\n    save, list, remove\n}\n\nexport default SavedPreset;","import React from 'react';\n\nimport { MoreVert, Delete, BookmarkOutlined, DeleteOutline } from \"@material-ui/icons\"\nimport SavedPreset, { SavedPresetProps } from '../utils/savedPreset';\n\nimport {\n    Divider, IconButton,\n    ListItemIcon, ListItemSecondaryAction,\n    ListItemText, Popover, List, ListItem\n} from \"@material-ui/core\";\n\ntype Props = {\n    onChange?: (state: any) => void,\n    handleSave?: () => void,\n    handleClear?: () => void,\n    handleSelect?: (item: SavedPresetProps) => void\n}\n\nexport default function ViewSavedPresetMenu(props: Props) {\n\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleSave = () => {\n        props.handleSave && props.handleSave();\n        handleClose();\n    }\n\n    const presets = SavedPreset.list();\n\n    return <>\n        <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n            <MoreVert />\n        </IconButton>\n\n        <Popover\n            open={Boolean(anchorEl)}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            elevation={2}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                {presets.length ?\n                    presets.map(preset =>\n                        <ViewMenuItem handleClose={handleClose}\n                            handleSelect={props.handleSelect}\n                            key={`query-preset-${preset.id}`}\n                            item={preset} />) :\n                    <ListItem>\n                        <ListItemText primary=\"No presets\" />\n                    </ListItem>\n                }\n                <Divider />\n                <ListItem button onClick={handleSave}>\n                    <ListItemIcon><BookmarkOutlined /></ListItemIcon>\n                    <ListItemText primary=\"Save preset\" />\n                </ListItem>\n                {props.handleClear && <ListItem button onClick={props.handleClear}>\n                    <ListItemIcon><DeleteOutline /></ListItemIcon>\n                    <ListItemText primary=\"Clear data\" />\n                </ListItem>}\n            </List>\n        </Popover>\n    </>\n}\n\n\nfunction ViewMenuItem(props: {\n    handleClose: Function,\n    handleSelect?: (item: SavedPresetProps) => void\n    item: SavedPresetProps\n}) {\n    const { item } = props;\n\n    function handleClick() {\n        props.handleClose();\n        props.handleSelect && props.handleSelect(item);\n    }\n\n    function handleRemove() {\n        SavedPreset.remove(item.id);\n        props.handleClose();\n    }\n    let [name, desc] = item.name.split(\"—\");\n\n    return <ListItem button onClick={handleClick}>\n\n        <ListItemText\n            primary={name}\n            secondary={desc}\n        />\n\n        <ListItemSecondaryAction>\n            <IconButton onClick={handleRemove}><Delete /></IconButton>\n        </ListItemSecondaryAction>\n\n    </ListItem>\n}","import { cloneDeep } from \"lodash\";\nimport { TracieQueryResults } from \"../../modules/tracie-admin/src/TracieAdmin\";\n\nexport type TracieQueryRepresentData = {\n    name: string,\n    data: { x: Date, y: number }[]\n}\n\nexport function transformData(input: TracieQueryResults): TracieQueryRepresentData[] {\n    return input.map(item => {\n        return {\n            name: item.name,\n            data: Object.keys(item.result).map((k, x) => {\n                return {\n                    x: new Date(k),\n                    y: item.result[k]\n                }\n            })\n        }\n    })\n}\n\nexport function transformDataValueIncreasing(input: TracieQueryRepresentData[]) {\n    let cloned = cloneDeep(input);\n    let total = 0;\n    cloned.forEach(set => {\n        total = 0;\n        set.data.forEach(item => {\n            item.y = total += item.y;\n        })\n    })\n\n    return cloned;\n}","\ntype TimeInterval = \"week\" | \"month\" | \"day\" | \"hour\" | \"minute\";\n\nexport type GetTimeWindowParams = { start: Date, end: Date, interval: TimeInterval, intervalValue?: number };\n\nexport \nfunction getTimeWindow(options: GetTimeWindowParams) {\n\n    let { start, end, interval, intervalValue } = options;\n\n    switch (interval) {\n        case \"month\":\n        case \"week\":\n        case \"day\":\n            start.setHours(0, 0, 0, 0);\n            end.setHours(0, 0, 0, 0);\n            break;\n        case \"hour\":\n            start.setMinutes(0,0,0);\n            end.setMinutes(0,0,0);\n            break;\n        case \"minute\":\n            start.setSeconds(0,0);\n            end.setSeconds(0,0);\n            break;\n    }\n\n    let startTime = new Date(start);\n    let data: any[] = [];\n    let last = new Date(start);\n    let endMs = end.getTime() + 1;\n\n    while (last.getTime() < endMs) {\n        last = increase({\n            date: last,\n            interval,\n            intervalValue\n        });\n        data.push({ start: startTime, end: last })\n        startTime = last;\n    }\n\n    return data;\n}\n\nfunction increase(opts: { date: Date, interval: TimeInterval, intervalValue?: number }) {\n\n    let cloned = new Date(opts.date);\n    let { intervalValue = 1 } = opts;\n\n    switch (opts.interval) {\n        case \"day\":\n            cloned.setDate(cloned.getDate() + intervalValue);\n            break;\n        case \"hour\":\n            cloned.setHours(cloned.getHours() + intervalValue);\n            break;\n        case \"minute\":\n            cloned.setMinutes(cloned.getMinutes() + intervalValue);\n            break;\n        case \"month\":\n            cloned.setMonth(cloned.getMonth() + intervalValue);\n            break;\n        case \"week\":\n            cloned.setDate(cloned.getDate() + (7 * intervalValue));\n            break;\n    }\n\n    return cloned;\n}","import { TracieQueryParams } from \"../modules/tracie-admin/src/TracieAdmin\";\nimport { getTimeWindow, GetTimeWindowParams } from \"./timeWindow\";\n\nexport const Colors = {\n    red: 'rgb(255, 99, 132)',\n    orange: 'rgb(255, 159, 64)',\n    yellow: 'rgb(255, 205, 86)',\n    green: 'rgb(75, 192, 192)',\n    blue: 'rgb(54, 162, 235)',\n    purple: 'rgb(153, 102, 255)',\n    grey: 'rgb(201, 203, 207)'\n};\n\nvar MONTHS = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n];\n\nvar COLORS = [\n    '#4dc9f6',\n    '#f67019',\n    '#f53794',\n    '#537bc4',\n    '#acc236',\n    '#166a8f',\n    '#00a950',\n    '#58595b',\n    '#8549ba'\n];\n\nvar Samples: any = {};\n\nSamples.utils = {\n    // Adapted from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n    srand: function (seed: number) {\n        this._seed = seed;\n    },\n\n    rand: function (min: number, max: number) {\n        var seed = this._seed;\n        min = min === undefined ? 0 : min;\n        max = max === undefined ? 1 : max;\n        this._seed = (seed * 9301 + 49297) % 233280;\n        return min + (this._seed / 233280) * (max - min);\n    },\n\n    numbers: function (config: any) {\n        var cfg = config || {};\n        var min = cfg.min || 0;\n        var max = cfg.max || 1;\n        var from = cfg.from || [];\n        var count = cfg.count || 8;\n        var decimals = cfg.decimals || 8;\n        var continuity = cfg.continuity || 1;\n        var dfactor = Math.pow(10, decimals) || 0;\n        var data = [];\n        var i, value;\n\n        for (i = 0; i < count; ++i) {\n            value = (from[i] || 0) + this.rand(min, max);\n            if (this.rand() <= continuity) {\n                data.push(Math.round(dfactor * value) / dfactor);\n            } else {\n                data.push(null);\n            }\n        }\n\n        return data;\n    },\n\n    labels: function (config: any) {\n        var cfg = config || {};\n        var min = cfg.min || 0;\n        var max = cfg.max || 100;\n        var count = cfg.count || 8;\n        var step = (max - min) / count;\n        var decimals = cfg.decimals || 8;\n        var dfactor = Math.pow(10, decimals) || 0;\n        var prefix = cfg.prefix || '';\n        var values = [];\n        var i;\n\n        for (i = min; i < max; i += step) {\n            values.push(prefix + Math.round(dfactor * i) / dfactor);\n        }\n\n        return values;\n    },\n\n    months: function (config: any) {\n        var cfg = config || {};\n        var count = cfg.count || 12;\n        var section = cfg.section;\n        var values = [];\n        var i, value;\n\n        for (i = 0; i < count; ++i) {\n            value = MONTHS[Math.ceil(i) % 12];\n            values.push(value.substring(0, section));\n        }\n\n        return values;\n    },\n\n    color: function (index: number) {\n        return COLORS[index % COLORS.length];\n    },\n\n    transparentize: function (color: string, opacity: number) {\n        var alpha = opacity === undefined ? 0.5 : 1 - opacity;\n\n        // @ts-ignore\n        return Color[color].alpha(alpha).rgbString();\n    }\n};\n\n// DEPRECATED\nfunction randomScalingFactor() {\n    return Math.round(Samples.utils.rand(-100, 100));\n};\n\n// INITIALIZATION\n\nSamples.utils.srand(Date.now());\n\nconst ChartUtils = {\n    Colors,\n    Samples: {\n        randomScalingFactor\n    }\n}\n\nexport default ChartUtils;\n\nfunction generateRandomData(name: string, options: GetTimeWindowParams) {\n\n\n    const time = getTimeWindow(options);\n    let result: { [name: string]: number } = {};\n\n    time.forEach(v => {\n        result[v.start.toJSON()] = Math.round(Samples.utils.rand(100, 5000));\n    })\n\n    return {\n        name,\n        result\n    }\n}\n\nfunction randomData(keywords: string[], options: TracieQueryParams) {\n\n    return keywords.map(name => generateRandomData(name, {\n        // @ts-ignore\n        interval: options.$interval,\n        // @ts-ignore\n        start: new Date(options.$start),\n        // @ts-ignore\n        end: new Date(options.$end),\n        intervalValue: options.$intervalValue\n    }));\n}\n\nexport {\n    randomData\n}","import React from \"react\";\n\nimport cls from \"./styles.module.scss\";\n\nimport ViewGraph from \"./ViewGraph\";\nimport TracieAdmin from \"../utils/tc\";\nimport ChipInput from \"material-ui-chip-input\";\nimport ViewSavedPresetMenu from \"./ViewPresetMenu\";\nimport SavedPreset, { SavedPresetProps } from \"../utils/savedPreset\";\n\nimport { withSnackbar } from 'notistack';\nimport { ArrowForward } from \"@material-ui/icons\";\nimport { TracieQueryInterval } from \"../../modules/tracie-admin/src/TracieAdmin\";\n\n\nimport {\n    IconButton, Select,\n    MenuItem, FormControl, InputLabel,\n    TextField, FormControlLabel, Switch,\n    Divider\n} from '@material-ui/core';\n\nimport { TracieQueryRepresentData, transformDataValueIncreasing, transformData } from \"../utils/transform\";\nimport { randomData } from \"../../demo/generator\";\n\ntype State = {\n    data?: any,\n    keyword?: string[],\n    interval: TracieQueryInterval,\n    start?: Date,\n    end?: Date,\n    period: \"custom\" | \"all\" | \"180\" | \"90\" | \"30\" | \"7\",\n    intervalValue?: number,\n    valueIncreasing: boolean\n};\n\nclass HomePage extends React.Component {\n\n    state: State = { interval: \"day\", period: \"30\", valueIncreasing: false };\n    data?: TracieQueryRepresentData[];\n\n    private handleSubmit = (ev: React.FormEvent) => {\n        ev.preventDefault();\n        this.fetchData();\n    }\n\n    private clearData = () => {\n        this.data = undefined;\n        this.setState({ data: undefined });\n    }\n    private fetchData = async () => {\n        if (this.state.keyword) {\n\n            let start = this.state.start, end = this.state.end;\n\n            switch (this.state.period) {\n                case \"custom\":\n                    break;\n                case \"all\":\n                    start = undefined;\n                    end = undefined;\n                    break;\n                default:\n                    start = new Date();\n                    // @ts-ignore\n                    end = new Date().toJSON();\n                    start.setDate(start.getDate() - parseInt(this.state.period));\n                    // @ts-ignore\n                    start = start.toJSON();\n            }\n\n            try {\n                const keywords = this.state.keyword;\n                let options = {\n                    $interval: this.state.interval,\n                    $start: start,\n                    $end: end,\n                    $intervalValue: this.state.intervalValue\n                };\n                let rs = process.env.REACT_APP_USE_SAMPLE_DATA === \"true\" ? randomData(keywords, options) : await TracieAdmin.query(keywords, options);\n                this.data = transformData(rs as any);\n                this.setGraphData();\n            } catch (err) {\n                console.log(err);\n                let errMessage = err.toString();\n                if (errMessage.indexOf(`Failed to fetch`)) {\n                    errMessage = `Unable to reach server`;\n                }\n                // @ts-ignore\n                this.props.enqueueSnackbar(errMessage, { variant: \"error\" });\n            }\n        }\n    }\n\n    private setGraphData = () => {\n\n        if (this && this.data) {\n            let data = this.state.valueIncreasing ?\n                transformDataValueIncreasing(this.data) : this.data;\n            this.setState({ data })\n        }\n    }\n\n    private handleChange = (ev: any) => {\n\n        const target = ev.target as HTMLInputElement;\n\n        // @ts-ignore\n        if (target.value !== this.state[target.name]) {\n\n            this.setState({\n                [target.name]: target.type === \"checkbox\" ? target.checked : target.value\n            }, () => {\n                if (target.name === \"valueIncreasing\") {\n                    this.setGraphData();\n                } else {\n                    this.fetchData()\n                }\n            })\n        }\n    }\n\n    private handleValueChange = (ev: any) => {\n\n        const target = ev.target as HTMLInputElement;\n\n        // @ts-ignore\n        if (target.value !== this.state[target.name]) {\n\n            this.setState({\n                [target.name]: target.type === \"checkbox\" ? target.checked : target.value\n            })\n        }\n    }\n\n    private savePreset = () => {\n        let { data, ...rest } = this.state;\n        SavedPreset.save(rest);\n    }\n\n    private setPreset = (item: SavedPresetProps) => {\n        this.setState({ ...item.state }, () => {\n            this.fetchData();\n        });\n    }\n\n    render() {\n        const { interval, period, intervalValue } = this.state;\n\n        return <>\n            <div className={cls.bar}>\n                <div className={cls.barGroup}>\n                    <FormControl>\n                        <InputLabel id=\"period-label\">Period</InputLabel>\n                        <Select\n                            labelId=\"period-label\"\n                            name=\"period\"\n                            value={period}\n                            onChange={this.handleChange}\n                        >\n                            <MenuItem value=\"all\">All time</MenuItem>\n                            <MenuItem value=\"7\">Last 7 days</MenuItem>\n                            <MenuItem value=\"30\">Last 30 days</MenuItem>\n                            <MenuItem value=\"90\">Last 90 days</MenuItem>\n                            <MenuItem value=\"180\">Last 180 days</MenuItem>\n                            <MenuItem value=\"custom\">Custom</MenuItem>\n                        </Select>\n                    </FormControl>\n                    {period === \"custom\" && <>\n                        <Divider orientation=\"vertical\" />\n                        <TextField\n                            name=\"start\"\n                            label=\"Start Date\"\n                            type={interval === \"minute\" ? \"datetime-local\" : \"date\"}\n                            onBlur={this.handleChange}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n\n                        <TextField\n                            name=\"end\"\n                            label=\"End Date\"\n                            type={interval === \"minute\" ? \"datetime-local\" : \"date\"}\n                            onBlur={this.handleChange}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </>}\n                    <Divider orientation=\"vertical\" />\n\n                    <FormControl>\n                        <InputLabel id=\"interval-label\">Interval</InputLabel>\n                        <Select\n                            labelId=\"interval-label\"\n                            id=\"demo-simple-select\"\n                            name=\"interval\"\n                            value={interval}\n                            onChange={this.handleChange}\n                        >\n                            <MenuItem value=\"month\">Every {intervalValue} Month</MenuItem>\n                            <MenuItem value=\"week\">Every {intervalValue} Week</MenuItem>\n                            <MenuItem value=\"day\">Every {intervalValue} Day</MenuItem>\n                            <MenuItem value=\"hour\">Every {intervalValue} Hour</MenuItem>\n                            <MenuItem value=\"minute\">Every {intervalValue} Minute</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                    <TextField name=\"intervalValue\"\n                        defaultValue=\"1\"\n                        type=\"number\"\n                        onChange={this.handleChange}\n                        label=\"Interval value\" />\n\n                    <Divider orientation=\"vertical\" />\n\n                    <FormControlLabel\n                        control={<Switch\n                            checked={this.state.valueIncreasing}\n                            name=\"valueIncreasing\"\n                            color=\"primary\"\n                            onChange={this.handleChange}\n                            inputProps={{ 'aria-label': 'Switch show value increasing' }}\n                        />}\n                        label=\"Show value increasing\"\n                    />\n                </div>\n\n                <div className={cls.flexRow}>\n                    <form onSubmit={this.handleSubmit} className={cls.form}>\n                        <ChipInput\n\n                            placeholder=\"Enter event name\"\n                            defaultValue={this.state.keyword}\n                            onChange={chips => this.handleValueChange({ target: { value: chips, name: \"keyword\" } })}\n                        />\n                        <IconButton type=\"submit\" className={cls.iconButton} aria-label=\"search\">\n                            <ArrowForward />\n                        </IconButton>\n                    </form>\n                    <ViewSavedPresetMenu\n                        handleClear={this.clearData}\n                        handleSave={this.savePreset}\n                        handleSelect={this.setPreset}\n                    />\n                </div>\n            </div>\n            <ViewGraph data={this.state.data} />\n        </>\n    }\n}\n\n// @ts-ignore\nexport default withSnackbar(HomePage);","import HomePage from \"./HomePage\";\n\nexport default HomePage;","import \"./styles.scss\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport HomePage from './pages/home';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { SnackbarProvider } from \"notistack\";\n\nimport {\n  AppBar,\n  Toolbar,\n  Container,\n  Typography\n} from \"@material-ui/core\";\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return <SnackbarProvider>\n    <div className={classes.root}>\n      <Router>\n        <AppBar color=\"primary\" position=\"static\">\n          <Container component={Toolbar} maxWidth=\"lg\">\n              <Typography variant=\"h6\" className={classes.title}>\n                Tracie Dashboard\n              </Typography>\n          </Container>\n        </AppBar>\n\n        <Container className={classes.body} maxWidth=\"lg\">\n          <Switch>\n            <Route path=\"/\" component={HomePage} />\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  </SnackbarProvider>\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  body: {\n    marginTop: theme.spacing(4),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emptyBox\":\"styles_emptyBox__2I2Sk\",\"flexRow\":\"styles_flexRow__zI-uc\",\"iconButton\":\"styles_iconButton__2jaUf\",\"form\":\"styles_form__5h7V1\",\"barGroup\":\"styles_barGroup__1L-e8\",\"bar\":\"styles_bar__1ZHgN\"};"],"sourceRoot":""}